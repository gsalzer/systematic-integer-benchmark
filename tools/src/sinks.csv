"id";"description";"contract_level_code";"function_modifier_code";"function_body_code";"type_tags";"version_tags";"location_tags"
"nothing";"do nothing with num";;;;"[""all""]";"[""all""]";"[""all""]"
"return";"return num";;"returns ( {{{ type }}} )";"return num;";"[""all""]";"[""all""]";"[""function""]"
"storagepublic";"save to public storage variable; contrary to a private variable this should definetely get saved to storage as the variable is intended to be accessed from outside of contract";"{{ type }} public storage_variable;";;"storage_variable = num;";"[""all""]";"[""all""]";"[""all""]"
"storageprivate";"save to private storage variable; the idea is that the compiler might optimize and do not save private variable to storage if variable does not ever get used again";"{{ type }} private storage_variable;";;"storage_variable = num;";"[""all""]";"[""all""]";"[""all""]"
"storageinternal";"save to internal storage variable";"{{ type }} internal storage_variable;";;"storage_variable = num;";"[""all""]";"[""all""]";"[""all""]"
"emit";"emit Event";"event TestEvent( {{ type }} );";;"emit TestEvent(num);";"[""all""]";"[""all""]";"[""all""]"
"calltaintedvaluev05";"call to address with tainted value";;;"address(0x1111111111111111111111111111111111111111).call.value(num)("""");";"[""unsigned""]";"[""0.4"",""0.5""]";"[""all""]"
"calltaintedvaluev08";"call to address with tainted value";;;"address(0x1111111111111111111111111111111111111111).call{value: num}("""");";"[""unsigned""]";"[""0.6"",""0.7"",""0.8""]";"[""all""]"
"calltainteddata";"call to address with tainted data";;;"address(0x1111111111111111111111111111111111111111).call(abi.encodeWithSignature(""foo( {{{ type }}} )"", num));";"[""all""]";"[""all""]";"[""all""]"
"transferv05";"Transfer ether with tainted amount";;;"address(0x1111111111111111111111111111111111111111).transfer(num);";"[""unsigned""]";"[""0.4"",""0.5""]";"[""all""]"
"transferv08";"Transfer ether with tainted amount";;;"payable(0x1111111111111111111111111111111111111111).transfer(num);";"[""unsigned""]";"[""0.6"",""0.7"",""0.8""]";"[""all""]"
"sendv05";"Send with tainted amount";;;"address(0x1111111111111111111111111111111111111111).send(num);";"[""unsigned""]";"[""0.4"",""0.5""]";"[""all""]"
"sendv08";"Send with tainted amount";;;"payable(0x1111111111111111111111111111111111111111).send(num);";"[""unsigned""]";"[""0.6"",""0.7"",""0.8""]";"[""all""]"
"requiresingle";"Require using variable only on one side of condition";;;"require( num > 23 );";"[""all""]";"[""all""]";"[""all""]"
"requiredouble";"Require using variable on both sides of condition, mimicking an overflow check";;;"require( num + 1 < num);";"[""all""]";"[""all""]";"[""all""]"
"ifsinglenojump";"If only using variable on one side of condition; no jump inside if ";;;"if (num > 23) { {{{ type }}} some_var = 10; }";"[""all""]";"[""all""]";"[""all""]"
"ifsinglerevert";"if only using variable on one side of condition; revert inside";;" ";"if (num > 23 ) { revert(); }";"[""all""]";"[""all""]";"[""all""]"
"ifternarysinglereturn";"Ternary If only using variable on one side of condition";;"returns (uint8)";"return (num > 23) ? 1 : 2;";"[""all""]";"[""all""]";"[""function""]"
"ifdoublenojump";"If using variable on both sides of condition; according to Osiris paper this indicates an overflow check, which would make it a benign bug. BUT here no jump will be executed inside the conditional branch";;;"if ( num + 1 < num ) { uint8 some_var = 20; }";"[""all""]";"[""all""]";"[""all""]"
"ifdoublerevertcorrect";"If implementing an overflow check; using revert in the correct branch";;;"if ( num + 1 < num ) { revert(); }";"[""all""]";"[""all""]";"[""all""]"
"ifdoublerevertwrong";"If implementing an overflow check; using revert in the incorrect branch";;;"if ( num + 1 > num ) { revert(); }";"[""all""]";"[""all""]";"[""all""]"
"assertsingle";"assert using variable only on one side of condition";;;"assert( num > 23 );";"[""all""]";"[""all""]";"[""all""]"
"assertdouble";"assert using variable on both sides of condition";;;"assert ( num + 1 < num );";"[""all""]";"[""all""]";"[""all""]"
