category;bug_type;name;description;code;type_tags
arithmetic;overflow;{{{ type }}}ofpp;{{{ type }}} overflow plus plus;"{{{ type }}} num = {{{ type_max_val }}}; num++;";"[""all""]"
arithmetic;overflow;{{{ type }}}ofpe;{{{ type }}} overflow plus equals;"{{{ type }}} num = {{{ type_max_val }}}; num += 1;";"[""all""]"
arithmetic;overflow;{{{ type }}}ofadd;{{{ type }}} overflow addition;"{{{ type }}} num = {{{ type_max_val }}}; num = num + 1;";"[""all""]"
arithmetic;overflow;{{{ type }}}ofte;{{{ type }}} overflow multiplication times equals;"{{{ type }}} num = {{{ type_max_val }}}; num *= 2;";"[""all""]"
arithmetic;overflow;{{{ type }}}ofmul;{{{ type }}} overflow multiplication;"{{{ type }}} num = {{{ type_max_val }}}; num = num * 2;";"[""all""]"
arithmetic;overflow;{{{ type }}}ofexp;{{{ type }}} overflow exponentiation;"{{{ type }}} num = {{{ type_max_val }}}; num = num ** 2;";"[""all""]"
arithmetic;underflow;{{{ type }}}ufmm;{{{ type }}} underflow minus minus;"{{{ type }}} num = {{{ type_min_val }}}; num--;";"[""all""]"
arithmetic;underflow;{{{ type }}}ufme;{{{ type }}} underflow minus equals;"{{{ type }}} num = {{{ type_min_val }}}; num -= 1;";"[""all""]"
arithmetic;underflow;{{{ type }}}ufsub;{{{ type }}} underflow subtraction;"{{{ type }}} num = {{{ type_min_val }}}; num = num - 1;";"[""all""]"
arithmetic;overflow;{{{ type }}}ofdivminusone;{{{ type }}} overflow minimal value division by minus one;"{{{ type }}} num = {{{ type_min_val }}}; num = num / -1;";"[""signed""]"
arithmetic;divison_by_zero;{{{ type }}}divzero;{{{ type }}} division by zero;"{{{ type }}} num = 1; num = num / 0;";"[""all""]"
arithmetic;divison_by_zero;{{{ type }}}divzerovariable;{{{ type }}} division by zero with variable;"{{{ type }}} num = 1; {{{ type }}} divisor = 0; num = num / divisor;";"[""all""]"
arithmetic;divison_by_zero;{{{ type }}}divzerose;{{{ type }}} division by zero slash equals;"{{{ type }}} num = 1; num /= 0;";"[""all""]"
arithmetic;divison_by_zero;{{{ type }}}divzerosevariable;{{{ type }}} divison by zero slash equals with variable;"{{{ type }}} num = 1; {{{ type }}} divisor = 0; num /= divisor;";"[""all""]"
arithmetic;modulo_by_zero;{{{ type }}}modzero;{{{ type }}} modulo by zero;"{{{ type }}} num = 1; num = num % 0;";"[""all""]"
arithmetic;modulo_by_zero;{{{ type }}}modzerovariable;{{{ type }}} modulo by zero with variable;"{{{ type }}} num = 1; {{{ type }}} divisor = 0; num = num % divisor;";"[""all""]"
arithmetic;modulo_by_zero;{{{ type }}}modzerope;{{{ type }}} modulo by zero percent equals;"{{{ type }}} num = 1; num %= 0;";"[""all""]"
arithmetic;modulo_by_zero;{{{ type }}}modzeropevariable;{{{ type }}} modulo by zero percent equals with variable;"{{{ type }}} num = 1; {{{ type }}} divisor = 0; num %= divisor;";"[""all""]"
truncation;truncation;{{{ type }}}truncinline;number truncated to {{{ type }}} inline;"{{{ type }}} num = {{{ type }}}(({{{ type_max_val }}})*256+255);";"[""signed1"",""unsigned1""]"
truncation;truncation;{{{ type }}}truncvariable;number truncated to {{{ type }}} via variable;"uint num2 = ({{{ type_max_val }}})*256+255; {{{ type }}} num = {{{ type }}}(num2);";"[""unsigned1""]"
truncation;truncation;{{{ type }}}truncvariable;number truncated to {{{ type }}} via variable;"int num2 = ({{{ type_max_val }}})*256+255; {{{ type }}} num = {{{ type }}}(num2);";"[""signed1""]"
signedness;signed_to_unsigned;{{{ type }}}assignmentinline;negative number assigned to {{{ type }}} inline;"{{{ type }}} num = {{{ type }}}(-1);";"[""unsigned""]"
signedness;signed_to_unsigned;{{{ type }}}assignmentvariable;negative number assigned to {{{ type }}} with variable;"int num2 = -1; {{{ type }}} num = {{{ type }}}(num2);";"[""unsigned""]"
signedness;unsigned_to_signed;{{{ type }}}assignmentinline;large number assigned to {{{ type }}} inline;"{{{ type }}} num = {{{ type }}}(({{{ type_max_val }}})*2+1);";"[""signed""]"
signedness;unsigned_to_signed;{{{ type }}}assignmentvariable;large number assigned to {{{ type }}} with variable;"uint num2 = ({{{ type_max_val }}})*2+1; {{{ type }}} num = {{{ type }}}(num2);";"[""signed""]"
